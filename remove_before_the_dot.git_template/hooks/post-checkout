#!/bin/bash
#
# GIT POST-CHECKOUT HOOK
# This should exist in git repo at .git/hooks/post-checkout
#
# GIT POST-MERGE HOOK
# This should exist in git repo at .git/hooks/post-merge
#
# Make sure to ensure it is chmoded to be executable!
#
# This hook detects when there are changes to the main project make file
# and prints out the drush remake command required to rebuild appropriately.
# It is designed to work as a post-checkout AND as a post-merge commit.
# It currently only supports fast-forward merges.

GIT_HOOK_TYPE=`basename $0`

if [ "$GIT_HOOK_TYPE" = "post-checkout" ]
then
  # The sha1 where we've just come from.
  OLD_HEAD=$1
  # The sha1 which we've just checked-out.
  NEW_HEAD=$2
  # IS 1 iff we just changed branches, 0 if a file was just checked out.
  IS_BRANCH_CHECKOUT=$3
fi

if [ "$GIT_HOOK_TYPE" = "post-merge" ]
then
  # We can only easily support fast-forward merges.
  # Anything else will either be a non-pull event, or a more complex merge
  # Bah, skip such validation. I'm sure it's fiiine.
  # LAST_REFLOG=`git reflog -n 1`
  # LAST_REFLOG_IS_FASTFORWARD=`echo $LAST_REFLOG | grep "merge .*: Fast-forward"`
  # if [ -z "$LAST_REFLOG_IS_FASTFORWARD" ]
  # then
  #   exit 1
  # fi
  # The sha1 where we've just come from.
  OLD_HEAD="HEAD@{1}"
  # The sha1 which we've just checked-out.
  NEW_HEAD="HEAD"
  # IS 1 iff we just changed branches, 0 if a file was just checked out.
  IS_BRANCH_CHECKOUT="1"
fi

# Root of this repository
GITROOT=`git rev-parse --show-toplevel`

if [ "$IS_BRANCH_CHECKOUT" = "1" -a "$OLD_HEAD" != "$NEW_HEAD" ]
then
  MAKEFILE=
  PROFILE=$(git config cm.profilemake)
  # If no profile path is provided, we just find the first *.make in the
  # repository root.
  if [ -z "$PROFILE" ]
  then
    # If PROJECTNAME is specified, assume PROJECTNAME.make
    PROJECTNAME=$(git config cm.project)
    if [ -n "$PROJECTNAME" ]
    then
      if [ -f "$GITROOT/$PROJECTNAME.make" ]
      then
        MAKEFILE="$GITROOT/$PROJECTNAME.make"
      fi
    fi
    # If no makefile specified so far, assume the first *.make we can find
    if [ -z "$MAKEFILE" -o ! -f "$MAKEFILE" ]
    then
      # Grabs first result of find
      MAKEFILE=`head -n 1 < <(find "$GITROOT" -maxdepth 1 -iregex '.*\.make')`
    fi
  fi

  # If we found a makefile, try to see if it has changed
  if [ -n "$MAKEFILE" -a -f "$MAKEFILE" ]
  then
    DIFFS=`git diff $NEW_HEAD..$OLD_HEAD -- -U1 --exit-code "$MAKEFILE"`
    # Sigh, despite git diff doc, it doesn't seem to do anything with an exit code
    if [ -n "$DIFFS" ]
    then
      # Extract list of Project names which have changed
      PROJECT_LINES=`echo $DIFFS | grep -E "(\+|\-)projects\[[a-zA-Z0-9_\-]+\]" -o`
      PROJECT_NAMES=
      for line in $PROJECT_LINES
      do
        LI=$line
        # Strip unwanted prefixes
        LI=`echo ${LI#*\[}`
        # Strip unwanted suffixes
        LI=`echo ${LI%%]}`
        # Maintain list of project names
        PROJECT_NAMES=`printf "$PROJECT_NAMES\n$LI"`
      done
      # Extract list of Library names which have changed
      LIBRARY_LINES=`echo $DIFFS | grep -E "(\+|\-)libraries\[[a-zA-Z0-9_\-]+\]" -o`
      LIBRARY_NAMES=
      for line in $LIBRARY_LINES
      do
        LI=$line
        # Strip unwanted prefixes
        LI=`echo ${LI#*\[}`
        # Strip unwanted suffixes
        LI=`echo ${LI%%]}`
        # Maintain list of library names
        LIBRARY_NAMES=`printf "$LIBRARY_NAMES\n$LI"`
      done
      # Write command to rebuild
      if [ ! -z "$PROJECT_NAMES" -o ! -z "$LIBRARY_NAMES" ]
      then
        REMAKE_CMD="drush remake"
        if [ ! -z "$PROJECT_NAMES" ]
        then
          PROJECT_LIST=`echo "$PROJECT_NAMES" | sort | uniq | tr '\n' ','`
          # Trim leading/trailing commas
          PROJECT_LIST=`echo "$PROJECT_LIST" | sed 's/^,*//g'`
          PROJECT_LIST=`echo "$PROJECT_LIST" | sed 's/,*$//g'`
          REMAKE_CMD="$REMAKE_CMD --projects='$PROJECT_LIST'"
        fi
        if [ ! -z "$LIBRARY_NAMES" ]
        then
          LIBRARY_LIST=`echo "$LIBRARY_NAMES" | sort | uniq | tr '\n' ','`
          # Trim leading/trailing commas
          LIBRARY_LIST=`echo "$LIBRARY_LIST" | sed 's/^,*//g'`
          LIBRARY_LIST=`echo "$LIBRARY_LIST" | sed 's/,*$//g'`
          REMAKE_CMD="$REMAKE_CMD --libraries='$LIBRARY_LIST'"
        fi
        # Write alert to screen
        echo ""
        echo "Make file has changed: $MAKEFILE"
        echo "Run the following command to remake it:"
        echo ""
        echo "$REMAKE_CMD"
      fi
    fi
  fi
fi

cd "`dirname $0`/../.."

# Check if a composer.json file is present
if [ -f composer.json ]; then

    # Detect composer binary
    if which composer >/dev/null; then
        composer='composer'
    elif which composer.phar >/dev/null; then
        composer='composer.phar'
    fi

    # Run composer if composer.json is updated
    if [ ! -e composer.lock ] || [ composer.json -nt composer.lock ]; then

        # Install or update depending on lock file
        echo "Composer packages need updating"

    fi
fi
